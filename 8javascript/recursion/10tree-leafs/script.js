// =============================================================================
// Входящие данные
// =============================================================================
// Должно получиться: 1
const graph1 = {
  value: 1
}

// Должно получиться: 1
const graph2 = {
  value: 1,
  children: []
}

// Должно получиться: 1
const graph3 = {
  value: 1,
  children: [{
    value: 2
  }]
}

// Должно получиться: 2
const graph4 = {
  value: 1,
  children: [{
    value: 2
  }, {
    value: 3
  }]
}

// Должно получиться: 3
const graph5 = {
  value: 1,
  children: [
    {
      value: 3
    },
    {
      value: 2,
      children: [
        {
          value: 4
        },
        {
          value: 6,
          children: []
        }
      ]
    }
  ]
}



// =============================================================================
// Рекурсивная функция
// =============================================================================
const countLeafs = (graph) => {
  // 1. Простой случай
  // 1.1. Если дочерних узлов нет (нет свойства "children" или его длина === 0)
  if (!graph.children || graph.children.length === 0) {
    // 1.2. Вернуть цифру 1
    return 1;
  }

  // 2. Сложный случай
  // 2.1. Вызвать функцию для каждого дочернего узла, суммируя полученные значения
  // 2.2. Вернуть полученную сумму
  return graph.children.reduce((sum, child) => sum + countLeafs(child), 0)
};



// =============================================================================
// Вызов функции
// =============================================================================
console.log( "graph1 (Должно получиться — 1): ", countLeafs(graph1) )
console.log( "graph2 (Должно получиться — 1): ", countLeafs(graph2) )
console.log( "graph3 (Должно получиться — 1): ", countLeafs(graph3) )
console.log( "graph4 (Должно получиться — 2): ", countLeafs(graph4) )
console.log( "graph5 (Должно получиться — 3): ", countLeafs(graph5) )
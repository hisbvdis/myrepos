// Промисы: Загрузка скрипта асинхронно (через промис)

// 1. Функция, которая при вызове будет создавать и возвращать промис
function loadScript(src) {
  return new Promise((resolve, reject) => {
    // 1.1. Асинхронный код (здесь асинхронно загружается скрипт из "src")
    let script = document.createElement("script");
    script.src = src;
    document.head.append(script);

    // 1.2. Если скрипт загрузился, промис считается "ВЫПОЛНЕНЫМ"
    // .... и вызывается функция "resolve()".
    // .... Через параметр в обработчик передаётся "значение".
    script.addEventListener("load", () => {
      resolve(`Скрипт "${src}" успешно загружен`)
    });

    // 1.3. Если скрипт не загрузился, промис считается "ОТКЛОНЕННЫМ"
    // .... и вызывается функция "reject()".
    // .... Через параметр в обработчик передаётся "объект ошибки".
    script.addEventListener("error", () => {
      reject(new Error(`Ошибка загрузки скрипта ${script.src}`))
    });
  })
}


// 2. Вызов функции "loadScript()" создаёт и возвращает промис
let promise = loadScript("test.js");


// 2.2. Метод, который назначает обработчики ВЫПОЛНЕНИЯ и ОТКЛОНЕНИЯ
promise.then(
  // 3.1. Функция-обработчик ВЫПОЛНЕНИЯ исполнителя
  status => console.log( status ),
  // 3.2. Функция-обработчик ОТКЛОНЕНИЯ исполнителя
  error => console.log( error.message )
)
/*
==============================================================================
========================== 1. ОСНОВНАЯ ИДЕЯ ==================================
==============================================================================
1.1. Адаптив частично можно реализовывать с использованием только "Flexbox" (без "@media")
1.2. Если Flex-контейнер разрешает перенос (flex-wrap: wrap), его содержимое 
     выстраивается в одну линию (не переносится) только, если Flex-контейнер
     имеет достаточный размер для вмещения "Box model" его самого
     (paddings, margin, border) и "flex-basis" дочерних элементов
1.3. Таким образом, можно вычислять и настраивать момент перестраивания
*/




/*
==============================================================================
==================== 2. КАРТОЧКА (МАЛЕНЬКИЕ ЭКРАНЫ) ==========================
==============================================================================
2.1. На самых маленьких экранах дочерние элементы карточки выстраиваются
     друг под другом, потому что размер карточки им не хватает места,
     чтобы выстроиться в линию
*/



/*
==============================================================================
=================== 3. КАРТОЧКА (СРЕДНИЕ ЭКРАНЫ) =============================
==============================================================================
3.1. Элементы карточки выстроятся в одну линию, когда карточка достигнет размера > 492px
     - Image "flex-basis" = 150px
     - Text "flex-basis" = 300px
     - Gap = 20px
     - Paddings = 2 * 10 = 20px
     - Borders = 2 * 1px = 2px
     - Сумма значений: 492px
3.2. Когда карточка продолжает увеличиваться и появляется дополнительное свободное мето,
     при его распределении картинке достаётся 1 часть, тексту — 3 части
*/
.card {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;                  /* Container "gap" */
  padding: 30px 10px 10px;    /* Container "padding" */

  border: 1px solid black;    /* Container "border" */
}

.image {
  flex: 1 1 150px;            /* Image "flex-basis" */
}

.text {
  flex: 3 1 300px;            /* Text "flex-basis" */
}

/*
3.3. При выстраивании в одну линию "чётные" карточки будут иметь обратное направление раскладки
*/
.card:nth-child(even) {
  flex-direction: row-reverse;
}




/*
==============================================================================
========================== 4. КОНТЕЙНЕР ======================================
==============================================================================
4.1. Чтобы карточки контейнера размещались рядом, контейнер должен иметь размер,
     достаточный для вмещения как минимум двух карточек 
     - Card "flex-basis" = 500px
     - Card "flex-basis" = 500px
     - Gap = 30px
     - Сумма значений: 1030px
4.2. Когда контейнер продолжит увеличиваться и будет появляться свободное место,
     оно будет распределяться между карточками, пока свободного места не станет
     достаточно для вмещения "gap" + "flex-basis" ещё одной карточки
     - Card "flex-basis" = 500px
     - Gap = 30px
*/
.container {
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
}

.card {
  flex: 1 1 500px;
}




















/* ======================================================================== */
/* NOT IMPORTANT — DECORATIVE STYLES */
/* ======================================================================== */
* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: sans-serif;
}

p {
  margin: 0;
}

.container {
  margin: 0;
  padding: 0;
}

.card {
  position: relative;
  
  background: #ccc;
  border-radius: 10px;
}

.card__total {
  position: absolute;
  inset-block-start: 5px;
  inset-inline-start: 50%;
  translate: -50% 0;
}

.image {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0;
  aspect-ratio: 2 / 1;

  background-color: lightblue;
}

.image {
  max-width: 100%;
}

.text {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0;
  
  background-color: lightcoral;
  border-radius: 10px;
}
